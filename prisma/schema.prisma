generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  role          UserRole      @default(USER)
  email         String
  password      String
  refresh_token String?
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  companies     Company[]
  votes         Vote[]
  comments      Comment[]
  Verification  Verification?
}

model Verification {
  id        Int      @id @default(autoincrement())
  code      String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?     @unique
  createdAt DateTime @default(now())
  expiresIn DateTime
}

model Company {
  id                         Int                @id @default(autoincrement())
  name                       String
  description                String
  country                    String
  city                       String?
  website                    String
  linkedIn                   String?
  supportsSponsorshipProgram SponsorshipSupport
  createdAt                  DateTime           @default(now())
  user                       User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                     Int?
  isApproved                 Boolean            @default(false)
  comments                   Comment[]
  Bookmarks                  Bookmarks[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
  votes     Vote[]
}

model Vote {
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  vote      VoteStatus

  @@id([userId, commentId])
}

model Bookmarks {
  id        Int      @id @default(autoincrement())
  userId    Int
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
  createdAt DateTime @default(now())
}

model Log {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  body      String
  url       String
  method    String
}

enum UserRole {
  ADMIN
  USER
}

enum SponsorshipSupport {
  UNKNOWN
  NO
  YES
}

enum VoteStatus {
  UpVote
  DownVote
}
